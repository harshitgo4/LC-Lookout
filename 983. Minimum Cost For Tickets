class Solution {
public:
    int dp[366];
    int helper(vector<int>& days, vector<int>& costs,int index)
    {
        if(index>=days.size())
        return 0;
        if(dp[index]!=-1)
        return dp[index];
        int ans=1e5;
        for(int i=0;i<3;i++)
        {
            vector<int> :: iterator low;
            if(i==0)
            low=lower_bound(days.begin(),days.end(),days[index]+1);
            else if(i==1)
            low=lower_bound(days.begin(),days.end(),days[index]+7);
             else
            low=lower_bound(days.begin(),days.end(),days[index]+30);
            int found=low-days.begin();
            ans=min(ans,costs[i]+helper(days,costs,found));
        }
        dp[index]= ans;
        return dp[index];
    }
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        memset(dp,-1,sizeof(dp));
        return helper(days,costs,0);
    }
};
