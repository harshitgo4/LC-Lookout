class Solution {
public:
    int helper(vector<int>& arr, int k, int index, vector<int>& memo) {
        if (index == arr.size()) {
            return 0;
        }

        if (memo[index] != -1) {
            return memo[index];
        }

        int mx = INT_MIN;
        int ans = 0;

        for (int i = 0; i < k && index + i < arr.size(); i++) {
            mx = max(mx, arr[index + i]);
            ans = max(ans, mx * (i + 1) + helper(arr, k, index + i + 1, memo));
        }

        memo[index] = ans;
        return ans;
    }

    int maxSumAfterPartitioning(vector<int>& arr, int k) {
        int n = arr.size();
        vector<int> memo(n, -1);
        return helper(arr, k, 0, memo);
    }
};
