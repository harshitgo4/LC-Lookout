class Solution {
public:
    void helper(vector<int>& candidates, int target, vector<vector<int>>& combinations, vector<int>& current, int index) {
        if (target == 0) {
            combinations.push_back(current);
            return;
        }

        for (int i = index; i < candidates.size(); i++) {
            if (candidates[i] > target) {
                break;  // Stop recursion if candidate is greater than target
            }

            if (i > index && candidates[i] == candidates[i - 1]) {
                continue;  // Skip duplicates
            }

            current.push_back(candidates[i]);
            helper(candidates, target - candidates[i], combinations, current, i + 1);
            current.pop_back();
        }
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> combinations;
        vector<int> current;
        
        sort(candidates.begin(), candidates.end());
        helper(candidates, target, combinations, current, 0);
        
        return combinations;
    }
};
