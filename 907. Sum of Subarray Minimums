#include <vector>
#include <stack>

class Solution {
public:
    int modulo = 1e9 + 7;

    int sumSubarrayMins(std::vector<int>& arr) {
        int n = arr.size();
        std::stack<int> st;
        std::vector<int> left(n), right(n);

        for (int i = 0; i < n; ++i) {
            while (!st.empty() && arr[i] < arr[st.top()]) {
                st.pop();
            }
            left[i] = st.empty() ? -1 : st.top();
            st.push(i);
        }

        while (!st.empty()) {
            st.pop();
        }

       
        for (int i = n - 1; i >= 0; --i) {
            while (!st.empty() && arr[i] <= arr[st.top()]) {
                st.pop();
            }
            right[i] = st.empty() ? n : st.top();
            st.push(i);
        }

        long long ans = 0; 

        for (int i = 0; i < n; ++i) {
            ans = (ans + (long long)(i - left[i]) * (right[i] - i) % modulo * arr[i]) % modulo;
        
            if (ans < 0) {
                ans += modulo;
            }
        }

        return static_cast<int>(ans);
    }
};
