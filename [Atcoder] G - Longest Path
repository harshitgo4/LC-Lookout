#include <iostream>
#include <vector>
using namespace std;

int findMaxLength(vector<vector<int>> &graph, int start, vector<int> &dp) {
    if (dp[start] != -1)
        return dp[start];

    int ans = 0;
    for (int neighbor : graph[start]) {
        ans = max(ans, 1 + findMaxLength(graph, neighbor, dp));
    }

    dp[start] = ans;
    return dp[start];
}

int main() {
    int n, e;
    cin >> n >> e;

    vector<int> dp(n + 1, -1);
    vector<vector<int>> graph(n + 1);

    for (int i = 0; i < e; i++) {
        int a, b;
        cin >> a >> b;
        graph[a].push_back(b); 
    }

    int maxi = 0;
    for (int i = 1; i <= n; i++) {
        int ans = findMaxLength(graph, i, dp);
        maxi = max(maxi, ans);
    }

    cout << maxi << endl;

    return 0;
}
