class Solution {
public:
    int dp[601][101][101];
    pair<int,int> count(string s)
    {   int count1=0;
        int count2=0;
        for(int i=0;i<s.size();i++)
        {
            if(s[i]=='1')
            count1++;
            else
            count2++;
        }
        return make_pair(count1,count2);
    }
    int helper(vector<string>& strs, int m, int n,int i)
    {   if(i==strs.size())
        return 0;
        if(m==0&&n==0)
        return 0;
        if(dp[i][m][n]!=-1)
        return dp[i][m][n];
        pair<int,int> val;
        val=count(strs[i]);
        int ones=val.first;
        int zeros=val.second;
        int take=0;
        int notake=helper(strs,m,n,i+1);
        if(m-zeros>= 0 && n-ones>=0)
        take=1+helper(strs,m-zeros,n-ones,i+1);
        dp[i][m][n]=max(take,notake);
        return dp[i][m][n];
    }
    int findMaxForm(vector<string>& strs, int m, int n) {
        memset(dp,-1,sizeof(dp));
        return helper(strs,m,n,0);
    }
};
